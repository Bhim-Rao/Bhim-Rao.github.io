[
	{
		"name": "Conway's Game of Life",
		"description": "Understanding how Conway's game of life and other cellular automata work",
		"content" : "## Game of life algorithm\nThe game of life takes place in an infinite two dimensional grid of cells. However in this implementation the grid is finite. A cell can be alive or dead which can also be called populated and unpopulated. every cell relates to 8 of it's direct neighbors.\n<div id=\"cen\">\n<img src=\"assets/imgs/grid.png\" alt=\"drawing\" width=\"200\" text-align=\"center\"/>\n</div>\n\n### Rules:\n\n- if the cell is alive and has < 2 live neighbors it dies\n- if the cell is alive and has exactly 2 or 3 live neighbors it lives\n- if the cell is alive and has more than 3 neighbors it dies\n- if the cell is dead and has exactly 3 neighbors it becomes alive"
	},
	{
		"name": "Sand Simulation",
		"description": "Understanding how Conway's game of life and other cellular automata work",
		"content" : "## Sand Algorithm\nThe simulation uses a grid of cells that are either filled (by sand) or empty. The algorithm iterates through every cell and if the cell is filled the program goes through some checks.\n<div align=\"center\">\n  <img src=\"assets/imgs/grid2.png\" alt=\"drawing\" width=\"200\" text-align=\"center\" style=\"border-radius: 10%;\"/>\n</div>\n\n### Checks:\n\n- If cell 1 is empty the program empties the current cell and fills cell 1\n- Else if cell 2 is empty the program empties the current cell and fills cell 2\n- Else if cell 3 is empty the program empties the current cell and fills cell 3\n- Else the current cell stays filled"
	},
	{
		"name": "Basic Neural Network's in Python",
		"description": "example",
		"content": "\n# Simple Neural Network\n\nThis library implements a simple neural network using Python and NumPy. The network consists of an input layer, a hidden layer, and an output layer. The neural network is trained using backpropagation.\n\n## Prerequisites\n\n- Python 3.x\n- NumPy\n\n## Installation\n\nClone the repository:\n\n```sh\ngit clone https://github.com/Bhim-Rao/Simple-Neural.git\ncd simple-neural\n```\nInstall the required packages:\n```sh\npip install numpy\n```\n\n## Quickstart\n\nTo run an example that trains the XOR problem run these commands:\n\n```sh\npython main.py\n```\nThis example should output: \n```yaml\nInput: [0 0], Output: [0.4984385781118704]\nInput: [0 1], Output: [0.5084337861718952]\nInput: [1 0], Output: [0.4888554952924806]\nInput: [1 1], Output: [0.4988496643606066]\n```\n## Usage\n\n```py\nfrom brain import network\nimport numpy as np\n\nn = network.Network([2, 3, 1], learning_rate=0.1)\n\nn.gen()\n\ndata = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\ntarget = np.array([[0], [1], [1], [0]])\n\nn.train(data, target, epochs=10000)\n\nfor d in data:\n    out = n.feed_forward(d)\n    print(f\"Input: {d}, Output: {out}\")\n```\n\nThis is the example usage for the library\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details."
	}
]
